function TopTen(root) 
    //Declare a new empty Binary tree.
    d <- ∅
    //itterate over the Lexographicly sorted array from the current binary tree
    foreach (movie in root.ToArray()) 
        //if null then we initilise the new binary tree
        if(d = null)
            d.Value <- new BinaryTree(movie)
        //otherwise we add the movie to the new tree sorting by popularity
        else
            //initilise at the point in the tree we are working with
            point <- d.Value
            //initilise a temporay value to let us update the point refrence if 
            //the next child is null
            temp <- null
            //Create a new tree with just the thing we want, this is the leaf 
            //we will eventually add
            toAdd <- new BinaryTree(movie)
            //while we arn't at the point to add
            while(true)
                //assign the current point to temp, to save the refrence
                temp <- point
                //compare the current node with the value to add.
                //if the node is less then move the current point down the left branch
                if(point.Value.Popularity < toAdd.Value.Popularity)
                    point <- point.LeftChild
                    //if that branch is a dead end, don't worry, 
                    //just update the refrence held by temp, and then we're done.
                    if(point = null)
                        temp.LeftChild <- toAdd
                        break
                //otherwise we travel down the right branch.
                else
                    point <- point.RightChild
                    //again if that branch dosen't exist, 
                    //just assign it to our added value and exit.
                    if(point = null)
                        temp.RightChild <- toAdd
                        break
    //finnaly now that we've got a new binary tree sorted by popularity,
    //Convert it to an array for easy itteration in display, 
    //and return the first ten items.
    return d.ToArray().Range(0,10)
        
    
 function BinaryTree.ToArray(this root)
    //Create a new Array of movies.
    movies <- ∅
    //Recursive function defined so as to access the movies array
    function RecursiveInOrder(Node)
        //if null then we don't need to keep going deeper.
        if(Node = null)
            return
        //first add all the left childern
        RecursiveInOrder(Node.LeftChild)
        //then add the root
        movies.Add(Node.Value)
        //then all the right childern
        RecursiveInOrder(Node.RightChild)
    //Start the recurive function at the root.
    RecursiveInOrder(root)
    //return the array'd movies
    return movies